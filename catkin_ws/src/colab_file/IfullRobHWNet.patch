--- /home/lerrelp/lca_learners/scripts/patch_learner/deeper_models.py
+++ /home/lerrelp/lca_learners/scripts/patch_learner/deeper_models.py
@@ -1,27 +1,18 @@
 class IfullRobHWNet(ResNet):
-    def __init__(
-        self,
-        h_size=128,
-        out_size=n_class,
-        noise_size=n_images,
-        pretrained_resnet18=True,
-        fixed_feature=False,
-        **kwargs
-    ):
+
+    def __init__(self, h_size=128, out_size=n_class, noise_size=n_images, pretrained_resnet18=True, fixed_feature=False, **kwargs):
         super(IfullRobHWNet, self).__init__(BasicBlock, [2, 2, 2, 2])
         if pretrained_resnet18:
             self.load_from_pretrained_resnet18()
-        if fixed_feature:
-            print("FIXING RESNET PARAMETERS")
-            for param in self.parameters():
-                param.requires_grad = False
+	if fixed_feature==True:
+	    print('FIXING RESNET PARAMETERS')
+	    for param in self.parameters():
+		param.requires_grad = False
         num_ftrs = self.fc.in_features
-        self.num_targets = 5
+	self.num_targets = 5
         self.num_targets_hw = 10
         self.fc_noise_0 = nn.Linear(num_ftrs, h_size)
-        self.fc_noise_1 = nn.Linear(
-            h_size + self.num_targets * n_robots + self.num_targets_hw * 2, h_size
-        )
+        self.fc_noise_1 = nn.Linear(h_size+self.num_targets*n_robots+self.num_targets_hw*2,h_size)
         self.fc_noise_2 = nn.Linear(h_size, h_size)
         self.fc_noise_3 = nn.Linear(h_size, noise_size)
         self.fc_noise_softmax = nn.Softmax(dim=None)
@@ -29,17 +20,15 @@
         self.fc_angle_1 = nn.Linear(h_size, out_size)
 
     def forward(self, x, robot_one_hot_labels, h, w, full_x, **kwargs):
-        one_hot_labels = robot_one_hot_labels
-        full_pool_out = self._one_forward(full_x)
-        pool_out = self._one_forward(x)
-        fc_noise_0_out = self.relu(self.fc_noise_0(full_pool_out))
-        label_info = one_hot_labels.float()
-        label_info_mult = torch.cat([label_info] * self.num_targets, 1)
-        h_info_mult = torch.stack([h] * self.num_targets_hw).transpose(1, 0)
-        w_info_mult = torch.stack([w] * self.num_targets_hw).transpose(1, 0)
-        fc_noise_in = torch.cat(
-            [fc_noise_0_out, label_info_mult, h_info_mult, w_info_mult], 1
-        )
+	one_hot_labels = robot_one_hot_labels
+	full_pool_out = self._one_forward(full_x)
+	pool_out = self._one_forward(x)
+	fc_noise_0_out = self.relu(self.fc_noise_0(full_pool_out))
+	label_info = one_hot_labels.float()
+	label_info_mult = torch.cat([label_info]*self.num_targets,1)
+        h_info_mult = torch.stack([h]*self.num_targets_hw).transpose(1,0)
+        w_info_mult = torch.stack([w]*self.num_targets_hw).transpose(1,0)
+	fc_noise_in = torch.cat([fc_noise_0_out, label_info_mult, h_info_mult, w_info_mult],1)
         noise_x = self.fc_noise_1(fc_noise_in)
         noise_x = self.relu(noise_x)
         noise_x = self.fc_noise_2(noise_x)
@@ -52,9 +41,9 @@
         return fc_angle_1_out, fc_noise_soft
 
     def _one_forward(self, x):
-        x = self.conv1(x)
-        x = self.bn1(x)
-        x = self.relu(x)
+        x = self.conv1(x)  
+        x = self.bn1(x) 
+        x = self.relu(x)  
         x = self.maxpool(x)
         x = self.layer1(x)
         x = self.layer2(x)
@@ -65,6 +54,6 @@
         return x
 
     def load_from_pretrained_resnet18(self):
-        print("Loading pretrained resnet18")
-        self.load_state_dict(model_zoo.load_url(model_urls["resnet18"]))
+        print('Loading pretrained resnet18')
+        self.load_state_dict(model_zoo.load_url(model_urls['resnet18']))
 